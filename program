///////////////////////////////////////////////////////////////////////
/////////////////////////Classes and Bitmojis//////////////////////////
///////////////////////////////////////////////////////////////////////

// Button Class
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
    this.color = config.color || color(0, 234, 255);
};
Button.prototype.draw = function() {
    rectMode(LEFT);
    fill(this.color);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(19);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};
Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};
Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

// Bullet Class
var Bullet =  function(config) {
    this.x = config.x || 200;
    this.y = config.y || 200;
    this.damage = config.damage || 50;
    this.speed = config.speed || 3;
    this.range = config.range || 400;
    this.distanceTraveled = 0;
    this.size = config.size || 7;
    this.color = config.color || color(0,0,0);
    
    // Really should config these before firing
    this.xDis = config.xDis || 1;
    this.yDis = config.yDis || 1;
    
    // Math to figure out xSpeed and ySpeed
    var xRatio = this.xDis / (Math.abs(this.xDis) + Math.abs(this.yDis));
    var yRatio = this.yDis / (Math.abs(this.xDis) + Math.abs(this.yDis));
    var mult = Math.sqrt(Math.pow(this.speed,2) / (Math.pow(xRatio,2) + Math.pow(yRatio,2)));
    
    this.xSpeed = xRatio * mult;
    this.ySpeed = yRatio * mult;
};
Bullet.prototype.move = function() {
    this.x += this.xSpeed;
    this.y += this.ySpeed;
    this.distanceTraveled += this.speed;
};
Bullet.prototype.draw = function() {
    fill(this.color);
    noStroke();
    ellipse(this.x, this.y, this.size, this.size);
};
Bullet.prototype.outOfRange = function() {
    // Return true if out of range
    if (this.distanceTraveled > this.range) {
        return true;
    } else {
        return false;
    }
};

// Enemy Class
var Enemy =  function(config) {
    // Randomly spawn outside of screen
    var dir = floor(random(0,4));
    if (dir === 0) {
        this.x = random(-50,450);
        this.y = -50;
    } else if (dir === 1) {
        this.x = 450;
        this.y = random(-50,450);
    } else if (dir === 2) {
        this.x = random(-50,450);
        this.y = 450;
    } else if (dir === 3) {
        this.x = -50;
        this.y = random(-50,450);
    }
    this.maxHealth = config.maxHealth || 100;
    this.currentHealth = this.maxHealth;
    this.speed = config.speed || 0.4;
    this.image = config.image || getImage("avatars/piceratops-seed");
    this.size = config.size || 25;
    this.money = config.money || 10;
    
    // Math to figure out xSpeed and ySpeed
    var xDis = 200 - this.x;
    var yDis = 200 - this.y;
    var xRatio = xDis / (Math.abs(xDis) + Math.abs(yDis));
    var yRatio = yDis / (Math.abs(xDis) + Math.abs(yDis));
    var mult = Math.sqrt(Math.pow(this.speed,2) / (Math.pow(xRatio,2) + Math.pow(yRatio,2)));
    
    this.xSpeed = xRatio * mult;
    this.ySpeed = yRatio * mult;
};
Enemy.prototype.draw = function() {
    // Move
    this.x += this.xSpeed;
    this.y += this.ySpeed;
    
    //// Draw
    
    // Health
    fill(255,0,0);
    noStroke();
    rectMode(LEFT);
    var healthRatio = this.currentHealth / this.maxHealth;
    rect(this.x-this.size/2, this.y-6*this.size/10, this.size*healthRatio, this.size/5);
    noFill();
    stroke(0,0,0);
    strokeWeight(1);
    rectMode(CENTER);
    rect(this.x, this.y-this.size/2, this.size, this.size/5);
    
    // Creature
    imageMode(CENTER);
    image(this.image, this.x, this.y, this.size, this.size);
};
Enemy.prototype.bulletCollision = function(bullet) {
    // Finding distance
    var xDis = Math.abs(this.x - bullet.x);
    var yDis = Math.abs(this.y - bullet.y);
    var dis = Math.sqrt(Math.pow(xDis,2) + Math.pow(yDis,2));
    
    // Finding what state the enemy is in
    if (dis < this.size/2 + bullet.size/2) {
        this.currentHealth -= bullet.damage;
        if (this.currentHealth <= 0) {
            return "kill";
        } else {
            return "damage";
        }
    } else {
        return "miss";
    }
};
Enemy.prototype.coreCollision = function() {
    // Finding distance
    var xDis = Math.abs(this.x - 200);
    var yDis = Math.abs(this.y - 200);
    var dis = Math.sqrt(Math.pow(xDis,2) + Math.pow(yDis,2));
    
    // If close enough, return true (plus 5 for better visuals)
    if (dis < this.size/2 + 5) {
        return "damage";
    } else {
        return "miss";
    }
};

// Tower Class
var Tower = function(config, bullet) {
    this.x = config.x || 100;
    this.y = config.y || 100;
    this.range = config.range || 100;
    this.fireRate = config.fireRate || 1000;
    this.lastTimeShot = 0;
    this.image = config.image || getImage("cute/WallBlockTall");
    this.size = config.size || 15;
    this.cost = config.cost || 50;
    
    // Making bullet
    this.bullet = bullet;
    this.bullet.x = this.x;
    this.bullet.y = this.y;
    this.bullet.speed = this.range*0.025;
    this.bullet.range = this.range;
};
Tower.prototype.draw = function() {
    // Draw
    imageMode(CENTER);
    image(this.image, this.x, this.y, this.size, this.size);
};
Tower.prototype.shoot = function(enemies) {
    // Reseting
    this.resetBullet();
    this.lastTimeShot = millis();
    
    // Checking Basics
    var minDis;
    var minIndex;
    if (enemies.length !== 0) {
        var xDis = Math.abs(this.x - enemies[0].x);
        var yDis = Math.abs(this.y - enemies[0].y);
        var dis = Math.sqrt(Math.pow(xDis,2) + Math.pow(yDis,2));
        
        minDis = dis;
        minIndex = 0;
    } else {
        // Send out of screen
        this.bullet.x = 500;
        this.bullet = new Bullet(this.bullet);
        return this.bullet;
    }
    
    // Finding closest
    for (var i = 1; i < enemies.length; i++) {
        var xDis = Math.abs(this.x - enemies[i].x);
        var yDis = Math.abs(this.y - enemies[i].y);
        var dis = Math.sqrt(Math.pow(xDis,2) + Math.pow(yDis,2));
        
        if (dis < minDis) {
            minDis = dis;
            minIndex = i;
        }
    }
    
    // Producing bullet if in range
    if (minDis < this.range) {
        this.bullet.xDis = enemies[minIndex].x - this.x;
        this.bullet.yDis = enemies[minIndex].y - this.y;
    } else {
        // Send out of screen
        this.bullet.x = 500;
    }
    
    // Return bullet
    this.bullet = new Bullet(this.bullet);
    return this.bullet;
};
Tower.prototype.resetBullet = function() {
    this.bullet.x = this.x;
    this.bullet.y = this.y;
};

// Ian's bitmoji
var bitmojiH = 150;
var drawBitmoji = function(bitmojiH,bitmojiX,bitmojiY){
  var drawBitmojiBody = function(bitmojiH,bitmojiX,bitmojiY){
    fill(0, 0, 74);
    rect(bitmojiX+(bitmojiH/150*150),bitmojiY+(bitmojiH/150*186),bitmojiH/150*100,bitmojiH/150*146); //body
    fill(255, 255, 255);
    text("IG", bitmojiX+bitmojiH/150*197,bitmojiY+bitmojiH/150*247, bitmojiH/150*218, bitmojiH/150*218);
    textSize(bitmojiH/150);
    

};

    var drawBitmojiHead = function(bitmojiH,bitmojiX,bitmojiY){
        fill(0, 0, 0);
    arc(bitmojiX+(bitmojiH/150*200),bitmojiY+(bitmojiH/150*134),bitmojiH/150*130,bitmojiH/150*130,-176,0); //headphones

    fill(255, 205, 148);
    ellipse(bitmojiX+bitmojiH/150*200,bitmojiY+bitmojiH/150*134,bitmojiH/150*100,bitmojiH/150*111); //face

    fill(255, 255, 255);
    arc(bitmojiX+bitmojiH/150*198,bitmojiY+bitmojiH/150*149,bitmojiH/150*38,bitmojiH/150*13,-23,187); //mouth

    line(bitmojiX+(bitmojiH/150*178),bitmojiY+(bitmojiH/150*125),bitmojiX+(bitmojiH/150*219),bitmojiY+bitmojiH/150*122); //glass bridge

    fill(185, 181, 255);
    rect(bitmojiX+(bitmojiH/150*160),bitmojiY+(bitmojiH/150*100),bitmojiH/150*37,bitmojiH/150*32); //glass lens 1

    fill(185,181,255);
    rect(bitmojiX+bitmojiH/150*202,bitmojiY+bitmojiH/150*100,bitmojiH/150*37,bitmojiH/150*32); //glass lens 2

    fill(94,72,30);
    ellipse(bitmojiX+(bitmojiH/150*178),bitmojiY+(bitmojiH/150*114),bitmojiH/150*20,bitmojiH/150*20); //left eye

    fill(94,72,30);
    ellipse(bitmojiX+(bitmojiH/150*219),bitmojiY+(bitmojiH/150*114),bitmojiH/150*20,bitmojiH/150*20); //right eye

    fill(0, 0, 0);
    ellipse(bitmojiX+(bitmojiH/150*142),bitmojiY+(bitmojiH/150*131),bitmojiH/150*33,bitmojiH/150*54); //left earphone
    ellipse(bitmojiX+(bitmojiH/150*260),bitmojiY+(bitmojiH/150*131),bitmojiH/150*33,bitmojiH/150*54); //right earphone
    
    };
    drawBitmojiBody(bitmojiH,bitmojiX,bitmojiY);
    drawBitmojiHead(bitmojiH,bitmojiX,bitmojiY);
    
};

// Nicholas drawBitmoji
var drawNickSweatshirt = function(x,y,h) {
    // Ratio
    var r = h/150;
    
    // // Sweatshirt
    // Body
    noStroke();
    fill(150,150,150);
    ellipse(x+0*r,y+75*r,150*r,80*r);
    fill(255,255,255);
    rect(x-3*r,y+50*r,6*r,50*r);
    rect(x-75*r,y+75*r,150*r,40*r);
    
    // Head
    fill(150,150,150);
    stroke(0,0,0);
    ellipse(x+0*r,y+15*r,75*r,100*r);
};
var drawNickFace = function(x,y,h) {
    // Ratio
    var r = h/150;
    
    // // Face
    // Hair
    fill(139,69,19);
    ellipse(x+0*r,y+15*r,60*r,80*r);
    
    // Skin
    noStroke();
    fill(255,228,196);
    ellipse(x+0*r,y+15*r,55*r,65*r);
    
    // Mouth
    stroke(0,0,0);
    fill(255,255,255);
    arc(x+0*r,y+25*r,30*r,10*r,0,180);
    noStroke();
    fill(222,184,135);
    arc(x+0*r,y+25*r,30*r,10*r,180,360);
    
    // Nose
    stroke(0,0,0);
    fill(255,228,196);
    triangle(x+0*r,y+0*r,x-8*r,y+20*r,x+8*r,y+20*r);
    
    // Eyes
    strokeWeight(3);
    line(x-15*r,y+3*r,x-5*r,y+2*r);
    line(x+15*r,y+3*r,x+5*r,y+2*r);
    fill(255,228,196);
    arc(x+10*r,y-2*r,15*r,2*r,180,360);
    arc(x-10*r,y-2*r,15*r,2*r,180,360);
    strokeWeight(1);
};
var drawNickBitmoji = function(x,y,h) {
    drawNickSweatshirt(x,y,h);
    drawNickFace(x,y,h);
};

///////////////////////////////////////////////////////////////////////
///////////////////////////Main Program////////////////////////////////
///////////////////////////////////////////////////////////////////////

// Basics
var gameScreen = 0;
var life = 3;
var money = 0;

//// Towers

// Basic
var basicBullet = new Bullet({});
var basicTower = new Tower({}, basicBullet);

// Sniper
var sniperBullet = new Bullet({damage: 100,
                               color: color(255, 221, 0)});
var sniperTower = new Tower({range: 200,
                             image: getImage("cute/StoneBlockTall")}, 
                             sniperBullet);

// Flamethrower
var flameThrowerBullet = new Bullet({damage: 20,
                                     size: 20,
                                     color: color(255, 140, 0)});
var flameThrowerTower = new Tower({range: 75,
                                   fireRate: 50,
                                   image: getImage("cute/GemOrange")}, 
                                   flameThrowerBullet);

// Turret
var turretBullet = new Bullet({damage: 15, 
                                size: 10});
var turretTower = new Tower({range: 50,
                            fireRate: 100,
                            image: getImage("cute/DoorTallClosed")}, turretBullet);

//// End

// Game Specific
var coreFireRate = 500;
var bullets = [];
var lastTimeShot = 0;
var enemies = [];
var lastTimeEnemySpawn = 0;
var enemySpawnRate = 1000;
var towers = [];
var isPlacingTower = false;
var towerToBePlaced;
var shopOpen = false;
var shopItem = [
    {
    name: "Basic",
    tower: basicTower,
    price: basicTower.cost,
    image: basicTower.image
    },
    {
    name: "Sniper",
    tower: sniperTower,
    price: sniperTower.cost,
    image: sniperTower.image
    },
    {
    name: "Turret",
    tower: turretTower,
    price: turretTower.cost,
    image: turretTower.image
    }
];

// Misc
var grasses = [];
var generateGrass = function () {
    grasses = [];
    for (var i = 0; i < 100; i++) {
        grasses.push({x: random(0,400), y: random(0,400)});
    }
};
generateGrass();

// Functions
var resetGame = function () {
    life = 3;
    money = 0;
    lastTimeEnemySpawn = 0;
    enemies = [];
    bullets = [];
    towers = [];
};
var spawnEnemies = function () {
    if (millis() - lastTimeEnemySpawn > enemySpawnRate) {
        var enemy = new Enemy({});
        enemies.push(enemy);
        lastTimeEnemySpawn = millis();
    }
};
var collisions = function () {
    for (var i = 0; i < enemies.length; i++) {
        // Core
        var coreHit = enemies[i].coreCollision();
        if (coreHit === "damage") {
            enemies.splice(i,1);
            i--;
            life--;
        } else if (coreHit === "miss") {
            for (var j = 0; j < bullets.length; j++) {
                // Bullets
                var bulletHit = enemies[i].bulletCollision(bullets[j]);
                if (bulletHit === "kill") {
                    money += enemies[i].money;
                    bullets.splice(j,1);
                    j--;
                    enemies.splice(i,1);
                    i--;
                    break;
                } else if (bulletHit === "damage") {
                    bullets.splice(j,1);
                    j--;
                } else if (bulletHit === "miss") {
                    // Nothing Should happen
                } else {
                    println("Error: Bullet Collision");
                }
            }
        } else {
            println("Error: Core Collision");
        }
    }
};
var splashScreenTowers = function () {
    
    // Making Towers
    var basicTower1 = new Tower(basicTower, basicTower.bullet);
    basicTower1.x = 150;
    basicTower1.y = 150;
    var basicTower2 = new Tower(basicTower, basicTower.bullet);
    basicTower2.x = 250;
    basicTower2.y = 150;
    var basicTower3 = new Tower(basicTower, basicTower.bullet);
    basicTower3.x = 150;
    basicTower3.y = 250;
    var basicTower4 = new Tower(basicTower, basicTower.bullet);
    basicTower4.x = 250;
    basicTower4.y = 250;
    
    towers = [basicTower1,
              basicTower2,
              basicTower3,
              basicTower4];
};
splashScreenTowers();

// Buttons
var startButton = new Button({
    x:10,
    y:60,
    label: "Start",
    color: color(255, 248, 56),
    onClick: function () {
        resetGame();
        gameScreen = 1;
    }
});
var close = new Button({
    x:10,
    y:10,
    label: "Close",
    color: color(255, 248, 56),
    onClick: function () {
        shopOpen = false;
    }
    
});
var shop = new Button({
        x:10,
        y:10,
        label: "Shop",
        color: color(255, 248, 56),
        onClick: function () {
            shopOpen = true;
            
        } 
    });

// Screens
var drawSplashScreen = function () {
    
    //// Logistics
    
    // Towers Shooting Bullets
    for (var i = 0; i < towers.length; i++) {
        if(millis() - towers[i].lastTimeShot > towers[i].fireRate) {
            bullets.push(towers[i].shoot(enemies));
        }
    }
    
    // Spawing Enemies
    spawnEnemies();
    
    // Collisions
    collisions();
    
    // Moving Bullets
    for (var i = 0; i < bullets.length; i++) {
        bullets[i].move();
    }

    //// Drawing
    
    // Background
    background(85, 189, 103);
    for (var i = 0; i < grasses.length; i ++) {
        stroke(6, 59, 10);
        strokeWeight(1);
        line(grasses[i].x, grasses[i].y, grasses[i].x, grasses[i].y-10);
        line(grasses[i].x-3, grasses[i].y, grasses[i].x-3, grasses[i].y-5);
        line(grasses[i].x+3, grasses[i].y, grasses[i].x+3, grasses[i].y-5);
    }
    
    // Towers
    for (var i = 0; i < towers.length; i++) {
        towers[i].draw();
    }
    
    // Bullets
    for (var i = 0; i < bullets.length; i++) {
        bullets[i].draw();
        
        // If out of bounds, or out of the towers range, delete it
        if (bullets[i].x < 0    ||
            bullets[i].x > 400  ||
            bullets[i].y < 0    ||
            bullets[i].y > 400  ||
            bullets[i].outOfRange()) {
            bullets.splice(i,1);
            i--;
        }
    }
    
    // Enemies
    for (var i = 0; i < enemies.length; i++) {
        enemies[i].draw();
    }
    
    // Core
    imageMode(CENTER);
    image(getImage("space/planet"),200,200,50,50);
    
    // Shadow
    image(getImage("cute/ShadowEast"),-600,180,2000,900);
    
    // Button
    startButton.draw();
    
    // Title
    fill(0,0,0);
    textAlign(CENTER);
    textSize(50);
    text("Defend!",95,45);
    
    // Bitmojis
    drawNickBitmoji(350,350,100);
    drawBitmoji(90,-55,250);
};
var drawGameScreen = function () {
    
    //// Logistics
    
    // Core Shooting Bullets
    if (millis() - lastTimeShot > coreFireRate) {
        var bullet = new Bullet({xDis: mouseX - 200 , yDis:  mouseY - 200, damage: 100});
        bullets.push(bullet);
        lastTimeShot = millis();
    }
    
    // Towers Shooting Bullets
    for (var i = 0; i < towers.length; i++) {
        if(millis() - towers[i].lastTimeShot > towers[i].fireRate) {
            bullets.push(towers[i].shoot(enemies));
        }
    }
    
    // Spawing Enemies
    spawnEnemies();
    
    // Collisions
    collisions();
    
    // Moving Bullets
    for (var i = 0; i < bullets.length; i++) {
        bullets[i].move();
    }
    
    // Game Over Check
    if (life < 1) {
        gameScreen = 2;
    }
    
    //// Drawing
    
    // Background
    background(85, 189, 103);
    for (var i = 0; i < grasses.length; i ++) {
        stroke(6, 59, 10);
        strokeWeight(1);
        line(grasses[i].x, grasses[i].y, grasses[i].x, grasses[i].y-10);
        line(grasses[i].x-3, grasses[i].y, grasses[i].x-3, grasses[i].y-5);
        line(grasses[i].x+3, grasses[i].y, grasses[i].x+3, grasses[i].y-5);
    }
    
    // Preview of placing tower
    if (isPlacingTower) {
        // Following Mouse
        towerToBePlaced.x = mouseX;
        towerToBePlaced.y = mouseY;
        
        // Drawing preview and range
        towerToBePlaced.draw();
        noFill();
        ellipse(mouseX, mouseY, towerToBePlaced.range*2, towerToBePlaced.range*2);
    }
    
    // Towers
    for (var i = 0; i < towers.length; i++) {
        towers[i].draw();
    }
    
    // Bullets
    for (var i = 0; i < bullets.length; i++) {
        bullets[i].draw();
        
        // If out of bounds, or out of the towers range, delete it
        if (bullets[i].x < 0    ||
            bullets[i].x > 400  ||
            bullets[i].y < 0    ||
            bullets[i].y > 400  ||
            bullets[i].outOfRange()) {
            bullets.splice(i,1);
            i--;
        }
    }
    
    // Enemies
    for (var i = 0; i < enemies.length; i++) {
        enemies[i].draw();
    }
    
    // Core
    imageMode(CENTER);
    image(getImage("space/planet"),200,200,50,50);
    
    // Shadow
    image(getImage("cute/ShadowEast"),-600,180,2000,900);
    
    // Information
    for (var i = 0; i < life; i++) {
        image(getImage("space/healthheart"),290+40*i,30,30,30);
    }
    imageMode(CENTER);
    image(getImage("cute/GemOrange"),280,360,30,50);
    textAlign(LEFT);
    fill(0,0,0);
    textSize(30);
    
    // Shop
    text(money,305,380);
    if (shopOpen === false) {
        shop.draw();
        fill(0, 0, 0);
    }
    if (shopOpen === true) {
        fill(0, 255, 128);
        rectMode(LEFT);
        rect(7,66,350,250);
        fill(0, 0, 0);
        close.draw();
        for (var i = 0; i < shopItem.length; ++i) {
            fill(255, 102, 102);
            rect(i*100+10, 75, 90, 100);
            fill(0, 0, 0);
            text(shopItem[i].name, i*100+20, 80, 60, 60);
            text(shopItem[i].price, i*100+20, 150);
            image(shopItem[i].image, i*100+47, 122, 50, 50);
        }
    }
};

// Khan Specials
draw = function() {
    if (gameScreen === 0) {
        drawSplashScreen();
    } else if (gameScreen === 1) {
        drawGameScreen();
    } else if (gameScreen === 2) {
        background(255,0,0);
        textAlign(CENTER);
        text("Game Over", 200, 200);
    }
};
mouseClicked = function () {
    if (gameScreen === 0) {
        // Buttons
        startButton.handleMouseClick();
    }
    if (gameScreen === 1) {
        // Shop Button
        if(shopOpen === false){
            shop.handleMouseClick();
        }
        else {
            close.handleMouseClick();
        }
        
        // Placing Towers
        if (isPlacingTower) {
            towers.push(towerToBePlaced);
            isPlacingTower = false;
        }
        
        // Buying from shop
        if(shopOpen === true)
        {
            for (var i = 0; i < shopItem.length; ++i)
            {
                if(shopItem[i].price <= money && 
                    mouseIsPressed && 
                    mouseX > 10 + 100 * i && 
                    mouseX < 100 + 100 * i && 
                    mouseY > 70 && 
                    mouseY < 170)
                {
                    shopOpen = false;
                    towerToBePlaced = new Tower(shopItem[i].tower, shopItem[i].tower.bullet);
                    money -= shopItem[i].price;
                    isPlacingTower = true;
                }
            }
        }
    }
};
